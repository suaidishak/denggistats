boring_function
submit()
my_mean(5,5,10)
my_mean(c(5,5,10)
/
kksd
my_mean()
my_mean(c(5,5,10))
my_mean(c(4,5,10))
submit()
remainder
remainder(5)
remainder(11,5)
remainder(divisor = 11,num =5)
remainder(4, div = 2)
args(remainder)
submit()
play()
SUBMIT()
submit()
play()
add_two_numbers <- function(num1, num2){
num1 + num2
}
multiply_two_numbers <- function(num1, num2){
num1 * num2
}
#
some_function <- function(func){
func(2, 4)
}
#
some_function(add_two_numbers)
submit()
evaluate(sum, c(2, 4, 6))
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
info()
nxt()
submit()
submit()
evaluate(sum,c(1,2,3))
submit()
submit()
submit()
submit()
submit()
evaluate(sum,c(2,4,6))
evaluate
submit()
evaluate
evaluate <- function(func,my_data){
# Write your code here!
# Remember: the last expression evaluated will be returned!
func(my_dat)
}
evaluate
evaluate(sum,c(2,4,6))
evaluate <- function(func,dat){
# Write your code here!
# Remember: the last expression evaluated will be returned!
func(dat)
}
evaluate
evaluate(sum,c(2,4,6))
skip()
evaluate
skip()
info()
skip()
main()
bye()
bye()
swirl()
submit()
bye()
swirl()
Sys.Date()
mean(c(2,4,5))
submit()
boring_function("My first function!")
boring_function
submit()
submit()
bye()
swirl()
Sys.Date()
mean(c(2,4,5))
submit()
boring_function('My first function!")
/
boring
boring_function('My first function!")
boring_function("My first function!")
boring_function
submit()
library(datasets)
data("mtcars")
head(mtcars)
tapply(mtcars$hp,mtcars$cyl,mean)
data("iris")
apply(iris[,1:4],2,mean)
library("swirl")
swirl()
skip()
skip()
skip()
cls_list <- lapply(flags, class)
cls_list
class(cls_list)
as.character(cls_list)
cls_vect <- sapply(flags, class)
cls_vect
class(cls_vect)
sum(flags$orange)
flag_colors <- flags[, 11:17]
head(flag_colors)
lapply(flag_colors,sum)
sapply(flag_colors,sum)
sapply
sapply(flag_colors,,mean)
sapply(flag_colors,mean)
flag_shapes <- flags[, 19:23]
lapply(flag_shapes,range)
sapply(flag_shapes,range)
shape_mat <- sapply(flag_shapes, range)
shape_mat
class(shape_mat)
unique(c(3, 4, 5, 5, 5, 6, 6))
unique_vals <- lapply(flags,unique)
unique_vals
sapply(flags,unique)
sapply(unique_vals,length)
sapply(unique_vals,length)
sapply(flags,unique)
lapply(unique_vals, function(elem) elem[2])
sapply(flags,unique)
vapply(flags, unique, numeric(1))
ok()
sapply(flags, class)
vapply(flags,class,character(1))
?tapply
table(flags$landmass)
table(flags$landmass = 1)
table(flags$landmass)
play()
?table
table(flags$animate)
nxt()
table(flags$animate)
tapply(flags$animate, flags$landmass, mean)
max(tapply(flags$animate, flags$landmass, mean) )
tapply(flags$population, flags$red, summary)
tapply(flags$population, flags$landmass, summary)
con <- url("http://biostat.jhsph.edu/~jleek/contact.html")
htmlCode = readLines(con)
close(con)
htmlCode
class(htmlCode)
nchar[10]
nchar(htmlCode[10])
nchar(htmlCode[10]) + nchar(htmlCode[20]) + nchar(htmlCode[30]) + nchar(htmlCode[100])
htmlCode[10]
htmlCode[100]
?nchar
nchar(con)
htmlCode[10]
nchar(htmlCode[10])
nchar(htmlCode[20])
nchar(htmlCode[30])
nchar(htmlCode[100])
getwd()
setwd("~/Documents/Tableau Datasets/Data Science /assignment2/ProgrammingAssignment2")
dir()
source("makeCacheMatrix.R")
source("cacheSolve.R")
a <- diag(5,3)
a
CacheMatrix <- makeCacheMatrix(a)
cachesolve(CacheMatrix)
cacheSolve(CacheMatrix)
library("swirl")
swirl()
install_from_swirl("R_Programming")
install_from_swirl("Exploratary_Data_Analysis")
install_from_swirl("Exploratory_Data_Analysis")
swirl()
install.packages("ggplot2")
swirl()
head(flags)
dim(flags)
class(flags)
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
bye()
swirl()
swirl()
bye()
swirl()
bye()
swirl()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
install.packages(leaflet)
install.packages("leaflet")
library(leaflet)
mymap <- leaflet()
mymap <- addTiles()
mymap <- addTiles(mymap)
mymap
mymap <- addProviderTiles(mymap, provider = "CartoDB.Positron")
mymap
?setView
mymap <- setView(mymap, lng = 78.0419, lat = 27.1750, zoom zoom = 15 )
mymap <- setView(mymap, lng = 78.0419, lat = 27.1750, zoom = 15 )
mymap <- addMarkers(mymap, lng = 78.0419, lat = 27.1750,popup = "Taj Mahal")
mymap
mymap <- addMarkers(mymap, lng = 78.0419, lat = 27.1750,popup = "Taj Murah")
mymap
df = data.frame(Lat = 1:10, Long = rnorm(10))
leaflet(df) %>% addCircles()
install.packages("map")
install.packages("maps")
mapStates = map("state", fill = TRUE, plot = FALSE)
library(maps)
mapStates = map("state", fill = TRUE, plot = FALSE)
leaflet(data = mapStates) %>% addTiles() %>%
addPolygons(fillColor = topo.colors(10, alpha = NULL), stroke = FALSE)
m <- leaflet() %>%
addTiles() %>%
setView(-72.690940, 41.651426, zoom = 8) %>%
addMarkers(lng=-72.690940, lat=41.651426, popup="<b>Hello</b><br><a href='http://www.trendct.org'>-TrendCT.org</a>")
m
data("mtcars")
data("mtcars")
str(mtcars)
plot(mtcars$disp, mtcars$wt, col = "red",
xlab = "Engine Displacement", ylab = "Weight")
set.seed(1234)
x<-rnorm(12,mean=rep(1:3,each=4),sd=0.2)
y<-rnorm(12,mean=rep(c(1,2,1),each=4),sd=0.2)
plot(x,y,col=“blue”,pch=19,cex=2)
text(x+0.05,y+0.05,labels=as.character(1:12))
plot(x,y,col=“blue”,pch=19,cex=2)
plot(x,y,col=“blue”,pch=19,cex=2)
plot(x,y,col=“blue”,pch=19,cex=2)
plot(x,y, col = "blue", pch =19, cex=2)
text(x+0.05,y+0.05,labels=as.character(1:12))
df <- data.frame(x, y)
distxy <- dist(df)
distxy
distxy
clusters<-hclust(distxy)
plot(clusters)
rect.hclust(clusters, k=2, border=“red”)
rect.hclust(clusters, k=3, border=“blue”)
rect.hclust(clusters, k=2, border = "red")
rect.hclust(clusters, k=3, border = "red")
k.cluster<-kmeans(df,centers=3)
names(k.cluster)
k.cluster$cluster
plot(x,y,col=k.cluster$cluster, pch = 19, cex = 2)
points(k.cluster$centers,col=1:3, pch = 3, cex = 3, lwd = 3)
data("mtcars")
summary(mtcars)
str(mtcars)
head(mtcars)
dist(mtcars)
with(mtcars,plot(disp,wt, col="red",xlab = "Engine Displacement", ylab = "Weight"))
set.seed(1234)
x<-rnorm(12,mean=rep(1:3,each=4),sd=0.2)
plot(x)
hist(x)
y<-rnorm(12,mean=rep(c(1,2,1),each=4),sd=0.2)
plot(x,y,col=“blue”,pch=19,cex=2)
plot(x,y,col=“blue”,pch=19,cex=2)
plot(x,y,col=“blue”,pch=19)
plot(x,y,col="blue",pch=19,cex=2)
?plot
plot(x,y,col="blue",pch=19,cex=4)
plot(x,y,col="blue",pch=19,cex=2)
text(x+0.05,y+0.05,labels=as.character(1:12))
?text
text(x+0.05,y+0.05,labels=as.character(1:12))
df <- data.frame(x,y)
distxy <- dist(df)
dist()
distxy
clusters <- hclust(distxy)
plot(clusters)
df
rect.hclust(clusters, k=2, border=“red”)
rect.hclust(clusters, k=2, border="red")
rect.hclust(clusters, k=3, border="blue")
k.cluster<-kmeans(df,centers=3)
names(k.cluster)
k.cluster$cluster
plot(x,y,col=k.cluster$cluster, pch = 19, cex = 2)
points(k.cluster$centers,col=1:3, pch = 3, cex = 3, lwd = 3)
k.cluster$centers
data("iris")
summary(iris)
names(iris)
Iris.features <- iris
Iris.features$class <- NULL
View(Iris.features)
View(iris)
View(Iris.features)
library(ggmap)
geocode("Toronto Ontario", output = "latlon" , source = "google")
geocode("Shah Alam", output = "latlon" , source = "google")
geocode("Bukit Jelutong,Shah Alam", output = "latlon" , source = "google")
geocodeQueryCheck()
geocode("Bukit Jelutong,Shah Alam", output = "latlon" , output = "more", source = "google")
geocode("Bukit Jelutong,Shah Alam", output = "latlon" , output = "more")
geocode("Bukit Jelutong,Shah Alam", output = "more")
mygeocode <- geocode("No 6,Jalan Jeriji U8/76C, Bukit Jelutong, Shah Alam", output = "more")
mygeocode$loctype
qmap(location = c(lon = mygeocode$lon, lat = mygeocode$lat), zoom = 17, maptype = "satellite")
?gecode
?geocode
plot(cars)
google.map <- get_map(location = 'Brazil', zoom=4,maptype="terrain")
library(ggmap)
google.map <- get_map(location = 'Brazil', zoom=4,maptype="terrain")
m0 <- ggmap(google.map)
m1 <- m0 + geom_polygon(color = 'grey90', size = .01, aes(x=long, y=lat, group=group, fill=as.factor(test)), data=MapC, alpha=.6)
usa <- map_data("usa")
x <- c("ggmap", "rgdal", "rgeos", "maptools", "dplyr", "tidyr", "tmap","googleVis","ggplot2","data.table")
lapply(x, library, character.only = TRUE) # load the required packages
setwd("~/Documents/denggistats")
mysadmin <- readOGR(dsn = "data", layer = "MYS_adm2")
Geo <- gvisMap(Population, locationvar = "Country",numvar="Population",options = list(height=350,dataMode='regions'))
?gvisMap
Geo <- gvisMap(Population, locationvar = "Country",tipvar="Population",options = list(height=350,dataMode='regions'))
plot(Geo)
stars7_master_raw <- read.csv("latest master data 11Oct2016.csv",stringsAsFactors = F)
stars7_master <- stars7_master_raw[,c(2,1,3,4,5,6,7,8,9,13,14,15,16,18,19,20)]
cnames <- c("Station_ID","Address_1","Address_2","City","Postcode","State","District","Region","Country")
cnames <- c(cnames,"Accessibilty","Binary_String","Actual_Max_Size","Latitude_Longitude")
cnames <- c(cnames,"User_Min_Stock","User_Max_Stock","Status")
names(stars7_master) <- cnames
stars7_master$Latitude_Longitude <- as.character(stars7_master$Latitude_Longitude)
lonlat <- substr(stars7_master$Latitude_Longitude,2,nchar(stars7_master$Latitude_Longitude)-1)
pos_comma <- regexpr(',',lonlat)
lat <- substr(lonlat,1,pos_comma-1)
lon <- substr(lonlat,pos_comma +1,nchar(lonlat)-1)
stars7_master$latitude <- lat
stars7_master$longitude <- lon
latitude <- stars7_master$latitude
longitude <- stars7_master$longitude
df <- data.frame(latitude,longitude)
df
names(df)
?get_map
df[,1:2]
df[1,1:2]
df[,1:2]$latitude
coord <- df[1,1:2]
coord
class(coord)
coord <- as.vector(coord)
map <- get_map(location = 'united states',zoom = 4,maptype = "terrain",source = 'google',color = 'color')
map
plot(map)
map <- get_map(location = 'united states',zoom = 4,maptype = "terrain",source = 'osm',color = 'color')
plot(map)
install.packages(zipcode)
install.packages("zipcode")
map <- get_map(location = 'malaysia',zoom = 4,maptype = "terrain",source = 'osm',color = 'color')
ggmap(map) + geom_point( aes(x= longitude, y= latitude, show_guide = T, colour = Median), data = coord, alpha=.5)
ggmap(map) + geom_point( aes(x= longitude, y= latitude, show_guide = T), data = coord, alpha=.5)
ggmap(map) + geom_point( aes(x= longitude, y= latitude, show_guide = T), data = stars7_master, alpha=.5)
ggmap(map)
map <- get_map(location = 'malaysia',zoom = 4,maptype = "terrain",source = 'osm',color = 'color')
install.packages("raster")
install.packages("raster")
install.packages("rgeos")
install.packages("rgeos")
install.packages("rgdal")
install.packages("rgdal")
x <- c("ggmap", "rgdal", "rgeos", "maptools", "dplyr", "tidyr", "tmap","googleVis","ggplot2","data.table","raster","sp")
lapply(x, library, character.only = TRUE) # load the required packages
lapply(x, library, character.only = TRUE) # load the required packages
x <- c("ggmap", "rgdal", "rgeos", "maptools", "dplyr", "tidyr", "tmap","googleVis","ggplot2","data.table","raster","sp")
lapply(x, library, character.only = TRUE) # load the required packages
install.packages("shapefiles")
library(shapefiles)
x <- CRS("+proj=longlat +ellps=WGS84")
mys <- readShapePoly("data/MYS_adm1")
mys <- readShapePoly("data/MYS_adm1",verbose = T,proj4string = x)
extent(mys)
head(mys@data)
head(mys@proj4string)
print(mys$NAME_1)
"Selangor" %in% mys$NAME_1
summary(mys@data)
summary(mys@data$NAME_1)
names(mys@data)
library(rworldmap)
install.packages("rworldmap")
library(rworldmap)
wn <- getMap(resolution = "coarse")
plot(wn)
data("wrld_simpl",package = "maptools")
plot(wrld_simpl,add = T)
plot(mys,add=T,axes=T,border="red")
selangor <- subset(mys, mys$NAME_1=="selangor")
plot(selangor,color="blue")
plot(selangor,colour="blue")
plot(selangor,col="blue")
plot(selangor,add=T,col="blue")
selangor <- subset(mys, mys$NAME_1=="Selangor")
plot(selangor,add=T,col="blue")
plot(mys)
plot(selangor, add=T, col="red")
qtm(selangor)
qtm(mys)
qtm(selangor,col="red")
plot(mys,axes=T,border="black")
plot(selangor,axes=T,col="red",zoom=5)
?plot
install.packages("ggvis")
library(ggvis)
data(mtcars)
p <- ggvis(mtcars, x = ~wt, y = ~mpg)
layer_points(p)
mtcars %>%
ggvis(~wt, ~mpg,
size := input_slider(10, 100),
opacity := input_slider(0, 1)
) %>%
layer_points()
install.packages("shinydashboard")
library(shinydashboard)
shiny()
shinyApp()
shinyApp(app)
runApp('dashboard')
runApp('dashboard')
runApp('dashboard')
library(swirl)
swirl()
install.packages("dplyr")
install.packages("dplyr")
swirl()
